// auto-generated by sqlc - do not edit
using System;
using System.Collections.Generic;

namespace backend.src.Queries.Codegen;

public class Citizen
{
    public required byte[] CitizenId { get; init; }
    public required string CredencialCivica { get; init; }
    public required int UruguayanId { get; init; }
    public required string Name { get; init; }
    public required string Surname { get; init; }
    public required DateTime Birth { get; init; }
    public required string PasswordHash { get; init; }
};

public class Department
{
    public required byte[] DepartmentId { get; init; }
    public required string Name { get; init; }
};

public class Locality
{
    public required byte[] LocalityId { get; init; }
    public required string Name { get; init; }
    public required LocalityType Type { get; init; }
    public required byte[] DepartmentId { get; init; }
};

public class Zone
{
    public required byte[] ZoneId { get; init; }
    public required string Name { get; init; }
    public required string PostalCode { get; init; }
    public required byte[] LocalityId { get; init; }
};

public class PoliceOfficer
{
    public required byte[] PoliceOfficerId { get; init; }
};

public class PoliceStation
{
    public required byte[] PoliceStationId { get; init; }
    public required byte[] ZoneId { get; init; }
    public required string Name { get; init; }
    public required string Address { get; init; }
};

public class PoliceOfficerAssignedPoliceStation
{
    public required byte[] PoliceOfficerId { get; init; }
    public required byte[] PoliceStationId { get; init; }
    public required DateTime AssignedDate { get; init; }
    public DateTime? DecomissionedDate { get; init; }
};

public class Establishment
{
    public required byte[] EstablishmentId { get; init; }
    public required string Name { get; init; }
    public required string Address { get; init; }
    public required byte[] ZoneId { get; init; }
};

public class PoliceOfficerAssignedEstablishment
{
    public required byte[] PoliceOfficerId { get; init; }
    public required byte[] EstablishmentId { get; init; }
    public required DateTime AssignedDate { get; init; }
};

public class PollingStationPresident
{
    public required byte[] PollingStationPresidentId { get; init; }
    public required string Org { get; init; }
};

public class PollingStationSecretary
{
    public required byte[] PollingStationSecretaryId { get; init; }
    public required string Org { get; init; }
};

public class PollingStationVocal
{
    public required byte[] PollingStationVocalId { get; init; }
    public required string Org { get; init; }
};

public class Election
{
    public required byte[] ElectionId { get; init; }
    public required string Description { get; init; }
    public required DateTime Date { get; init; }
    public required ElectionState State { get; init; }
};

public class PollingDistrict
{
    public int? PollingDistrictNumber { get; init; }
    public required bool IsOpen { get; init; }
    public required byte[] EstablishmentId { get; init; }
};

public class ElectionHasPollingDistrict
{
    public required byte[] ElectionId { get; init; }
    public required byte[] EstablishmentId { get; init; }
    public required int PollingDistrictNumber { get; init; }
};

public class PollingDistrictInElectionHasPollingStation
{
    public required byte[] PollingStationPresidentId { get; init; }
    public required byte[] PollingStationSecretaryId { get; init; }
    public required byte[] PollingStationVocalId { get; init; }
    public required int PollingDistrictNumber { get; init; }
    public required byte[] EstablishmentId { get; init; }
    public required byte[] ElectionId { get; init; }
};

public class CitizenVotesInPollingDistrictElection
{
    public required byte[] CitizenId { get; init; }
    public required byte[] ElectionId { get; init; }
    public required int PollingDistrictNumber { get; init; }
    public required byte[] EstablishmentId { get; init; }
};

public class CitizenAssignedIntPollingDistrictElection
{
    public required byte[] CitizenId { get; init; }
    public required byte[] ElectionId { get; init; }
    public required int PollingDistrictNumber { get; init; }
    public required byte[] EstablishmentId { get; init; }
};

public class Vote
{
    public required byte[] VoteId { get; init; }
    public required VoteState State { get; init; }
    public required int PollingDistrictNumber { get; init; }
    public required byte[] EstablishmentId { get; init; }
};

public class Ballot
{
    public required byte[] BallotId { get; init; }
};

public class VoteContainsBallot
{
    public required byte[] VoteId { get; init; }
    public required byte[] BallotId { get; init; }
};

public class BooleanBallot
{
    public required byte[] BooleanBallotId { get; init; }
    public required bool Value { get; init; }
    public required int TotalVotesWithValue { get; init; }
};

public class ListBallot
{
    public required byte[] ListBallotId { get; init; }
    public required int ListNumber { get; init; }
};

public class ListBallotHasCandidate
{
    public required byte[] ListBallotId { get; init; }
    public required byte[] CandidateId { get; init; }
    public required int IndexInList { get; init; }
    public required ListBallotHasCandidateOrg Org { get; init; }
};

public class Party
{
    public required byte[] PartyId { get; init; }
    public string? HedquartersAdress { get; init; }
    public string? Name { get; init; }
};

public class PartyHasCitizen
{
    public byte[]? PartyId { get; init; }
    public byte[]? CitizenId { get; init; }
    public required PartyHasCitizenRole Role { get; init; }
    public required DateTime AdmissionDate { get; init; }
    public DateTime? ExitDate { get; init; }
};

public class ListBallotBelongsToDepartment
{
    public required byte[] ListId { get; init; }
    public required byte[] DeparmentId { get; init; }
};

public class Pleibiscite
{
    public required byte[] ElectionId { get; init; }
};

public class Referendum
{
    public required byte[] ElectionId { get; init; }
};

public class Presidential
{
    public required byte[] ElectionId { get; init; }
};

public class Municipal
{
    public required byte[] ElectionId { get; init; }
    public required byte[] LocalityId { get; init; }
};

public class Ballotage
{
    public required byte[] ElectionId { get; init; }
};

public class ElectionAllowsBallot
{
    public required byte[] ElectionId { get; init; }
    public required byte[] BallotId { get; init; }
};

public enum LocalityType
{
    Invalid = 0, // reserved for invalid enum value
    City = 1,
    Town = 2,
    Other = 3,
}

public static class LocalityTypeExtensions
{
    private static readonly Dictionary<LocalityType, string> EnumToString = new Dictionary<
        LocalityType,
        string
    >()
    {
        [LocalityType.Invalid] = string.Empty,
        [LocalityType.City] = "city",
        [LocalityType.Town] = "town",
        [LocalityType.Other] = "other",
    };

    public static string ToEnumString(this LocalityType me)
    {
        return EnumToString[me];
    }
}

public enum ElectionState
{
    Invalid = 0, // reserved for invalid enum value
    NotStarted = 1,
    Open = 2,
    Closed = 3,
}

public static class ElectionStateExtensions
{
    private static readonly Dictionary<ElectionState, string> EnumToString = new Dictionary<
        ElectionState,
        string
    >()
    {
        [ElectionState.Invalid] = string.Empty,
        [ElectionState.NotStarted] = "notStarted",
        [ElectionState.Open] = "open",
        [ElectionState.Closed] = "closed",
    };

    public static string ToEnumString(this ElectionState me)
    {
        return EnumToString[me];
    }
}

public enum VoteState
{
    Invalid = 0, // reserved for invalid enum value
    Valid = 1,
    OutOfDistrict = 2,
    ApprovedOutOfDistrict = 3,
}

public static class VoteStateExtensions
{
    private static readonly Dictionary<VoteState, string> EnumToString = new Dictionary<
        VoteState,
        string
    >()
    {
        [VoteState.Invalid] = string.Empty,
        [VoteState.Valid] = "valid",
        [VoteState.OutOfDistrict] = "out_of_district",
        [VoteState.ApprovedOutOfDistrict] = "approved_out_of_district",
    };

    public static string ToEnumString(this VoteState me)
    {
        return EnumToString[me];
    }
}

public enum ListBallotHasCandidateOrg
{
    Invalid = 0, // reserved for invalid enum value
    Deputy = 1,
    Senator = 2,
    DepartmentalBoard = 3,
    MunicipalCouncilor = 4,
    MainCandidate = 5,
}

public static class ListBallotHasCandidateOrgExtensions
{
    private static readonly Dictionary<ListBallotHasCandidateOrg, string> EnumToString =
        new Dictionary<ListBallotHasCandidateOrg, string>()
        {
            [ListBallotHasCandidateOrg.Invalid] = string.Empty,
            [ListBallotHasCandidateOrg.Deputy] = "deputy",
            [ListBallotHasCandidateOrg.Senator] = "senator",
            [ListBallotHasCandidateOrg.DepartmentalBoard] = "departmental_board",
            [ListBallotHasCandidateOrg.MunicipalCouncilor] = "municipal_councilor",
            [ListBallotHasCandidateOrg.MainCandidate] = "main_candidate",
        };

    public static string ToEnumString(this ListBallotHasCandidateOrg me)
    {
        return EnumToString[me];
    }
}

public enum PartyHasCitizenRole
{
    Invalid = 0, // reserved for invalid enum value
    President = 1,
    VicePresident = 2,
}

public static class PartyHasCitizenRoleExtensions
{
    private static readonly Dictionary<PartyHasCitizenRole, string> EnumToString = new Dictionary<
        PartyHasCitizenRole,
        string
    >()
    {
        [PartyHasCitizenRole.Invalid] = string.Empty,
        [PartyHasCitizenRole.President] = "president",
        [PartyHasCitizenRole.VicePresident] = "vice_president",
    };

    public static string ToEnumString(this PartyHasCitizenRole me)
    {
        return EnumToString[me];
    }
}
