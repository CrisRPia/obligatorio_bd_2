// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using CsvHelper;
using CsvHelper.Configuration;
using CsvHelper.TypeConversion;
using MySqlConnector;

namespace backend.src.Queries.Codegen;

public class QueriesSql
{
    public QueriesSql(string connectionString)
    {
        this.ConnectionString = connectionString;
    }

    private string ConnectionString { get; }

    private const string GetAuthorSql =
        "SELECT id, name, bio FROM authors WHERE  id  =  @id  LIMIT  1  ";

    public readonly record struct GetAuthorRow(
        long Id,
        string Name,
        string? Bio
    );

    public readonly record struct GetAuthorArgs(long Id);

    public async Task<GetAuthorRow?> GetAuthor(GetAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var command = new MySqlCommand(GetAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@id", args.Id);
                using (var reader = await command.ExecuteReaderAsync())
                {
                    if (await reader.ReadAsync())
                    {
                        return new GetAuthorRow
                        {
                            Id = reader.GetInt64(0),
                            Name = reader.GetString(1),
                            Bio = reader.IsDBNull(2)
                                ? null
                                : reader.GetString(2),
                        };
                    }
                }
            }
        }

        return null;
    }

    private const string ListAuthorsSql =
        "SELECT id, name, bio FROM authors ORDER  BY  name  ";

    public readonly record struct ListAuthorsRow(
        long Id,
        string Name,
        string? Bio
    );

    public async Task<List<ListAuthorsRow>> ListAuthors()
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var command = new MySqlCommand(ListAuthorsSql, connection))
            {
                using (var reader = await command.ExecuteReaderAsync())
                {
                    var result = new List<ListAuthorsRow>();
                    while (await reader.ReadAsync())
                    {
                        result.Add(
                            new ListAuthorsRow
                            {
                                Id = reader.GetInt64(0),
                                Name = reader.GetString(1),
                                Bio = reader.IsDBNull(2)
                                    ? null
                                    : reader.GetString(2),
                            }
                        );
                    }

                    return result;
                }
            }
        }
    }

    private const string CreateAuthorSql =
        "INSERT INTO authors ( name , bio ) VALUES ( @name, @bio ) ";

    public readonly record struct CreateAuthorArgs(string Name, string? Bio);

    public async Task<long> CreateAuthor(CreateAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var command = new MySqlCommand(CreateAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@name", args.Name);
                command.Parameters.AddWithValue(
                    "@bio",
                    args.Bio ?? (object)DBNull.Value
                );
                return await command.ExecuteNonQueryAsync();
            }
        }
    }

    private const string DeleteAuthorSql =
        "DELETE FROM authors WHERE  id  =  @id  ";

    public readonly record struct DeleteAuthorArgs(long Id);

    public async Task DeleteAuthor(DeleteAuthorArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            await connection.OpenAsync();
            using (var command = new MySqlCommand(DeleteAuthorSql, connection))
            {
                command.Parameters.AddWithValue("@id", args.Id);
                await command.ExecuteScalarAsync();
            }
        }
    }
}
