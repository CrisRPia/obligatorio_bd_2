// auto-generated by sqlc - do not edit
// ReSharper disable UseObjectOrCollectionInitializer
// ReSharper disable UseAwaitUsing
// ReSharper disable ConvertToUsingDeclaration
// ReSharper disable NotAccessedPositionalProperty.Global
// ReSharper disable UnusedAutoPropertyAccessor.Global
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using CsvHelper;
using CsvHelper.Configuration;
using CsvHelper.TypeConversion;
using Dapper;
using MySqlConnector;

namespace backend.src.Queries.Codegen;

public partial class QueriesSql
{
    public QueriesSql(string connectionString)
    {
        this.ConnectionString = connectionString;
        Dapper.DefaultTypeMap.MatchNamesWithUnderscores = true;
    }

    private string ConnectionString { get; }

    public const string InsertCitizenVoteInPollingDistrictElectionSql =
        "INSERT INTO  citizen_votes_in_polling_district_election ( citizen_id , election_id, polling_district_number ) VALUES ( @citizen_id, @election_id, @polling_district_number ); SELECT  LAST_INSERT_ID ( ) ";

    public partial class InsertCitizenVoteInPollingDistrictElectionArgs
    {
        public required byte[] CitizenId { get; init; }
        public required byte[] ElectionId { get; init; }
        public required byte[] PollingDistrictNumber { get; init; }
    };

    public async Task InsertCitizenVoteInPollingDistrictElection(
        InsertCitizenVoteInPollingDistrictElectionArgs args
    )
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object?>();
            queryParams.Add("citizen_id", args.CitizenId);
            queryParams.Add("election_id", args.ElectionId);
            queryParams.Add("polling_district_number", args.PollingDistrictNumber);
            await connection.ExecuteAsync(
                InsertCitizenVoteInPollingDistrictElectionSql,
                queryParams
            );
        }
    }

    public const string InsertCitizenSql =
        "INSERT INTO  citizen ( citizen_id , uruguayan_id, credencial_civica, name, surname, birth, password_hash ) VALUES ( @citizen_id, @uruguayan_id, @credencial_civica, @name, @surname, @birth, @password_hash ); SELECT  LAST_INSERT_ID ( ) ";

    public partial class InsertCitizenArgs
    {
        public required byte[] CitizenId { get; init; }
        public required int UruguayanId { get; init; }
        public required string CredencialCivica { get; init; }
        public required string Name { get; init; }
        public required string Surname { get; init; }
        public required DateTime Birth { get; init; }
        public required string PasswordHash { get; init; }
    };

    public async Task InsertCitizen(InsertCitizenArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object?>();
            queryParams.Add("citizen_id", args.CitizenId);
            queryParams.Add("uruguayan_id", args.UruguayanId);
            queryParams.Add("credencial_civica", args.CredencialCivica);
            queryParams.Add("name", args.Name);
            queryParams.Add("surname", args.Surname);
            queryParams.Add("birth", args.Birth);
            queryParams.Add("password_hash", args.PasswordHash);
            await connection.ExecuteAsync(InsertCitizenSql, queryParams);
        }
    }

    public const string SelectUserAssignmentSql =
        "SELECT a.election_id, a.polling_district_number FROM  citizen_assigned_int_polling_district_election  a  LEFT  JOIN  citizen_votes_in_polling_district_election  v  ON  v . election_id  =  a . election_id  AND  v . citizen_id  =  a . citizen_id  AND  v . polling_district_number  =  a . polling_district_number  INNER  JOIN  election  e  ON  a . election_id  =  e . election_id  WHERE  a . citizen_id  =  @citizen_id  AND  e . date < CURRENT_DATE ( ) AND  e . is_open  AND  v . election_id  IS  NULL ; SELECT  LAST_INSERT_ID ( ) ";

    public partial class SelectUserAssignmentRow
    {
        public required byte[] ElectionId { get; init; }
        public required byte[] PollingDistrictNumber { get; init; }
    };

    public partial class SelectUserAssignmentArgs
    {
        public required byte[] CitizenId { get; init; }
    };

    public async Task<List<SelectUserAssignmentRow>> SelectUserAssignment(
        SelectUserAssignmentArgs args
    )
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object?>();
            queryParams.Add("citizen_id", args.CitizenId);
            var result = await connection.QueryAsync<SelectUserAssignmentRow>(
                SelectUserAssignmentSql,
                queryParams
            );
            return result.AsList();
        }
    }

    public const string SelectCitizenSql =
        "SELECT citizen_id, credencial_civica, uruguayan_id, name, surname, birth, password_hash FROM  citizen  WHERE  citizen_id  =  @citizen_id ; SELECT  LAST_INSERT_ID ( ) ";

    public partial class SelectCitizenRow
    {
        public required byte[] CitizenId { get; init; }
        public required string CredencialCivica { get; init; }
        public required int UruguayanId { get; init; }
        public required string Name { get; init; }
        public required string Surname { get; init; }
        public required DateTime Birth { get; init; }
        public required string PasswordHash { get; init; }
    };

    public partial class SelectCitizenArgs
    {
        public required byte[] CitizenId { get; init; }
    };

    public async Task<SelectCitizenRow?> SelectCitizen(SelectCitizenArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object?>();
            queryParams.Add("citizen_id", args.CitizenId);
            var result = await connection.QueryFirstOrDefaultAsync<SelectCitizenRow?>(
                SelectCitizenSql,
                queryParams
            );
            return result;
        }
    }

    public const string LoginCitizenSql =
        "SELECT c.citizen_id, c.credencial_civica, c.uruguayan_id, c.name, c.surname, c.birth, c.password_hash, po . police_officer_id, psp . polling_station_president_id, psv . polling_station_vocal_id, pss . polling_station_secretary_id  FROM  citizen  c  LEFT  JOIN  police_officer  po  ON  po . police_officer_id  =  c . citizen_id  LEFT  JOIN  polling_station_president  psp  ON  psp . polling_station_president_id  =  c . citizen_id  LEFT  JOIN  polling_station_vocal  psv  ON  psv . polling_station_vocal_id  =  c . citizen_id  LEFT  JOIN  polling_station_secretary  pss  ON  pss . polling_station_secretary_id  =  c . citizen_id  WHERE  c . credencial_civica  =  @credencial_civica  AND  c . uruguayan_id  =  @uruguayan_id; SELECT  LAST_INSERT_ID ( ) ";

    public partial class LoginCitizenRow
    {
        public required byte[] CitizenId { get; init; }
        public required string CredencialCivica { get; init; }
        public required int UruguayanId { get; init; }
        public required string Name { get; init; }
        public required string Surname { get; init; }
        public required DateTime Birth { get; init; }
        public required string PasswordHash { get; init; }
        public byte[]? PoliceOfficerId { get; init; }
        public byte[]? PollingStationPresidentId { get; init; }
        public byte[]? PollingStationVocalId { get; init; }
        public byte[]? PollingStationSecretaryId { get; init; }
    };

    public partial class LoginCitizenArgs
    {
        public required string CredencialCivica { get; init; }
        public required int UruguayanId { get; init; }
    };

    public async Task<LoginCitizenRow?> LoginCitizen(LoginCitizenArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object?>();
            queryParams.Add("credencial_civica", args.CredencialCivica);
            queryParams.Add("uruguayan_id", args.UruguayanId);
            var result = await connection.QueryFirstOrDefaultAsync<LoginCitizenRow?>(
                LoginCitizenSql,
                queryParams
            );
            return result;
        }
    }

    public const string InsertVoteSql =
        "INSERT INTO  vote ( vote_id , state ) VALUES ( @vote_id, @state ); SELECT  LAST_INSERT_ID ( ) ";

    public partial class InsertVoteArgs
    {
        public required byte[] VoteId { get; init; }
        public VoteState? State { get; init; }
    };

    public async Task InsertVote(InsertVoteArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object?>();
            queryParams.Add("vote_id", args.VoteId);
            queryParams.Add("state", args.State?.ToEnumString());
            await connection.ExecuteAsync(InsertVoteSql, queryParams);
        }
    }

    public const string InsertBallotSql =
        "INSERT INTO  vote_contains_ballot ( vote_id , ballot_id ) VALUES ( @vote_id, @ballot_id ); SELECT  LAST_INSERT_ID ( ) ";

    public partial class InsertBallotArgs
    {
        public required byte[] VoteId { get; init; }
        public required byte[] BallotId { get; init; }
    };

    public async Task InsertBallot(InsertBallotArgs args)
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object?>();
            queryParams.Add("vote_id", args.VoteId);
            queryParams.Add("ballot_id", args.BallotId);
            await connection.ExecuteAsync(InsertBallotSql, queryParams);
        }
    }

    public const string GetElectionsForCitizenSql =
        "SELECT e.election_id, e.description, e.date, e.is_open, b . election_id  AS  'ballotage_id', pl . election_id  AS  'pleibiscite_id', r . election_id  AS  'referndum_id', pr . election_id  AS  'presidential_id', m . election_id  AS  'municipal_id', department_id FROM  election  e  INNER  JOIN  citizen_assigned_int_polling_district_election  caipde  ON  e . election_id  =  caipde . election_id  AND  caipde . citizen_id  =  @citizen_id  LEFT  JOIN  ballotage  b  ON  e . election_id  =  b . election_id  LEFT  JOIN  pleibiscite  pl  ON  e . election_id  =  pl . election_id  LEFT  JOIN  referndum  r  ON  e . election_id  =  r . election_id  LEFT  JOIN  presidential  pr  ON  e . election_id  =  pr . election_id  LEFT  JOIN  municipal  m  ON  e . election_id  =  m . election_id  LEFT  JOIN  locality  l  ON  l . locality_id  =  m . locality_id  WHERE ( @start_date <= e . date ) AND ( @end_date >= e . date ) ; SELECT  LAST_INSERT_ID ( ) ";

    public partial class GetElectionsForCitizenRow
    {
        public required byte[] ElectionId { get; init; }
        public required string Description { get; init; }
        public required DateTime Date { get; init; }
        public required bool IsOpen { get; init; }
        public byte[]? BallotageId { get; init; }
        public byte[]? PleibisciteId { get; init; }
        public byte[]? ReferndumId { get; init; }
        public byte[]? PresidentialId { get; init; }
        public byte[]? MunicipalId { get; init; }
        public byte[]? DepartmentId { get; init; }
    };

    public partial class GetElectionsForCitizenArgs
    {
        public required byte[] CitizenId { get; init; }
        public required DateTime StartDate { get; init; }
        public required DateTime EndDate { get; init; }
    };

    public async Task<List<GetElectionsForCitizenRow>> GetElectionsForCitizen(
        GetElectionsForCitizenArgs args
    )
    {
        using (var connection = new MySqlConnection(ConnectionString))
        {
            var queryParams = new Dictionary<string, object?>();
            queryParams.Add("citizen_id", args.CitizenId);
            queryParams.Add("start_date", args.StartDate);
            queryParams.Add("end_date", args.EndDate);
            var result = await connection.QueryAsync<GetElectionsForCitizenRow>(
                GetElectionsForCitizenSql,
                queryParams
            );
            return result.AsList();
        }
    }
}
