/**
 * Generated by orval v7.1.0 🍺
 * Do not edit manually.
 * backend
 * OpenAPI spec version: 1.0
 */
export type GetElectionsParams = {
    MinimumDateTime?: string;
    /**
     * Inclusive.
     */
    MaximumDateTime?: string;
    DepartmentId?: string;
    OnlyOpenOrClosed?: ElectionState;
    /**
     * Do not specify to set to all.
     */
    RestrictToTypes?: ElectionType[];
    SearchTerm?: string;
    HasResults?: boolean;
    AvailableForUser?: string;
};
export type PutDepartmentsDepartmentIdCircuitsCircuitIdAuthorizeVoteVoteIdParams = {
    electionId?: string;
};
export interface Zone {
    locality: Locality;
    zoneId: string;
}
export type VoteType = (typeof VoteType)[keyof typeof VoteType];
export declare const VoteType: {
    readonly List: "List";
    readonly Boolean: "Boolean";
    readonly Count: "Count";
};
export interface StateSnapshot {
    elections: Election[];
}
export type Role = (typeof Role)[keyof typeof Role];
export declare const Role: {
    readonly Voter: "Voter";
    readonly BoardPresident: "BoardPresident";
    readonly Admin: "Admin";
    readonly Police: "Police";
};
export interface RoleIEnumerableAuthResponse {
    content: Role[];
    /** @minLength 1 */
    jwtToken: string;
}
export type PollingStationMemberRole = (typeof PollingStationMemberRole)[keyof typeof PollingStationMemberRole];
export declare const PollingStationMemberRole: {
    readonly President: "President";
    readonly Secretary: "Secretary";
    readonly Vocal: "Vocal";
};
export interface PollingStationMember {
    birthDate: string;
    /**
     * @minLength 1
     * @pattern ^[A-Z]{3}\d+$
     */
    credencialCivica: string;
    /** @minLength 1 */
    name: string;
    /** @minLength 1 */
    organization: string;
    role: PollingStationMemberRole;
    /** @minLength 1 */
    surname: string;
    /** @minLength 1 */
    uruguayanId: string;
}
export interface PollingStationMemberAuthResponse {
    content: PollingStationMember;
    /** @minLength 1 */
    jwtToken: string;
}
export interface PoliceStation {
    building: Building;
}
export interface PoliceOfficer {
    birthDate: string;
    /**
     * @minLength 1
     * @pattern ^[A-Z]{3}\d+$
     */
    credencialCivica: string;
    /** @minLength 1 */
    name: string;
    policeStation: PoliceStation;
    /** @minLength 1 */
    surname: string;
    /** @minLength 1 */
    uruguayanId: string;
}
export interface PoliceOfficerAuthResponse {
    content: PoliceOfficer;
    /** @minLength 1 */
    jwtToken: string;
}
export interface Party {
    /** @minLength 1 */
    headquartersAddress: string;
    partyId: string;
}
export interface ListAuthorsRow {
    /** @nullable */
    bio?: string | null;
    id?: number;
    /** @nullable */
    name?: string | null;
}
export interface IncomingVote {
    electionId: string;
    /**
     * Specify if vote type is Boolean.
     * @nullable
     */
    isYes?: boolean | null;
    /**
     * Specify if vote type is List.
     * @nullable
     */
    listId?: number | null;
    type: VoteType;
}
export interface IncomingVotes {
    items: IncomingVote[];
}
export interface GetCircuitsReturn {
    circuits: Circuit[];
}
export interface FullCitizen {
    birthDate: string;
    /**
     * @minLength 1
     * @pattern ^[A-Z]{3}\d+$
     */
    credencialCivica: string;
    /** @minLength 1 */
    name: string;
    /** @minLength 1 */
    surname: string;
    /** @minLength 1 */
    uruguayanId: string;
}
export interface FakeInput {
    circuitsPerDepartment: number;
    citizensToCreate: number;
    electionsToSimulate: number;
    /** @nullable */
    predeterminedCitizens?: FullCitizen[] | null;
}
export type ElectionType = (typeof ElectionType)[keyof typeof ElectionType];
export declare const ElectionType: {
    readonly Presidential: "Presidential";
    readonly Referendum: "Referendum";
    readonly Plebiscite: "Plebiscite";
    readonly MunicipalElection: "MunicipalElection";
    readonly Runoff: "Runoff";
};
export type ElectionState = (typeof ElectionState)[keyof typeof ElectionState];
export declare const ElectionState: {
    readonly Open: "Open";
    readonly Closed: "Closed";
};
export interface ElectionResult {
    /** @nullable */
    booleanResult?: BooleanVoteVoteResult[] | null;
    /** @nullable */
    listBasedResult?: CandidateListVoteResult[] | null;
    totalVotes: number;
    type: ElectionType;
}
export interface Election {
    date: string;
    electionId: string;
    result?: ElectionResult;
    type: ElectionType;
}
export interface ElectionListModel {
    items: Election[];
}
export interface Department {
    departmentId: string;
    /** @minLength 1 */
    name: string;
}
export interface Locality {
    department: Department;
    localityId: string;
}
export interface DefaultOk {
    success: boolean;
}
export interface CreateAuthorArgs {
    /** @nullable */
    bio?: string | null;
    /** @nullable */
    name?: string | null;
}
export interface Candidate {
    candidateId: string;
    /** @minLength 1 */
    name: string;
    position: number;
    /** @minLength 1 */
    surname: string;
}
export interface CandidateList {
    /**
     * The ordered list of candidates on this voting list. The first candidate is the main candidate.
     * @minItems 1
     */
    candidates: Candidate[];
    listNumber: number;
    party: Party;
}
export interface CandidateListVoteResult {
    percentage: number;
    vote: CandidateList;
    voteCount: number;
}
export interface Building {
    buildingId: string;
    zone: Zone;
}
export interface Circuit {
    building: Building;
    circuitNumber: number;
}
export interface BooleanVote {
    /**
     * @minLength 3
     * @maxLength 3
     */
    colorHex: string;
    yes: boolean;
}
export interface BooleanVoteVoteResult {
    percentage: number;
    vote: BooleanVote;
    voteCount: number;
}
export interface BaseCitizen {
    /**
     * @minLength 1
     * @pattern ^[A-Z]{3}\d+$
     */
    credencialCivica: string;
    /** @minLength 1 */
    uruguayanId: string;
}
export type postAuthPollingStationLoginResponse = {
    data: PollingStationMemberAuthResponse;
    status: number;
};
export declare const getPostAuthPollingStationLoginUrl: () => string;
export declare const postAuthPollingStationLogin: (baseCitizen: BaseCitizen, options?: RequestInit) => Promise<postAuthPollingStationLoginResponse>;
export type postAuthPollingStationRegisterResponse = {
    data: PollingStationMemberAuthResponse;
    status: number;
};
export declare const getPostAuthPollingStationRegisterUrl: () => string;
export declare const postAuthPollingStationRegister: (pollingStationMember: PollingStationMember, options?: RequestInit) => Promise<postAuthPollingStationRegisterResponse>;
export type postAuthPoliceOfficerRegisterResponse = {
    data: PoliceOfficerAuthResponse;
    status: number;
};
export declare const getPostAuthPoliceOfficerRegisterUrl: () => string;
export declare const postAuthPoliceOfficerRegister: (pollingStationMember: PollingStationMember, options?: RequestInit) => Promise<postAuthPoliceOfficerRegisterResponse>;
export type postAuthPoliceOfficerLoginResponse = {
    data: PoliceOfficerAuthResponse;
    status: number;
};
export declare const getPostAuthPoliceOfficerLoginUrl: () => string;
export declare const postAuthPoliceOfficerLogin: (pollingStationMember: PollingStationMember, options?: RequestInit) => Promise<postAuthPoliceOfficerLoginResponse>;
export type getDepartmentsDepartmentIdCircuitsCircuitIdResultsElectionIdResponse = {
    data: ElectionResult;
    status: number;
};
export declare const getGetDepartmentsDepartmentIdCircuitsCircuitIdResultsElectionIdUrl: (departmentId: string, circuitId: number, electionId: string) => string;
export declare const getDepartmentsDepartmentIdCircuitsCircuitIdResultsElectionId: (departmentId: string, circuitId: number, electionId: string, options?: RequestInit) => Promise<getDepartmentsDepartmentIdCircuitsCircuitIdResultsElectionIdResponse>;
/**
 * @summary  (Secured - Roles: Admin, BoardPresident)
 */
export type putDepartmentsDepartmentIdCircuitsCircuitIdAuthorizeVoteVoteIdResponse = {
    data: DefaultOk;
    status: number;
};
export declare const getPutDepartmentsDepartmentIdCircuitsCircuitIdAuthorizeVoteVoteIdUrl: (departmentId: string, circuitId: number, voteId: string, params?: PutDepartmentsDepartmentIdCircuitsCircuitIdAuthorizeVoteVoteIdParams) => string;
export declare const putDepartmentsDepartmentIdCircuitsCircuitIdAuthorizeVoteVoteId: (departmentId: string, circuitId: number, voteId: string, params?: PutDepartmentsDepartmentIdCircuitsCircuitIdAuthorizeVoteVoteIdParams, options?: RequestInit) => Promise<putDepartmentsDepartmentIdCircuitsCircuitIdAuthorizeVoteVoteIdResponse>;
/**
 * Get all circuits within a deparment.
 */
export type getDepartmentsDepartmentIdCircuitsResponse = {
    data: GetCircuitsReturn;
    status: number;
};
export declare const getGetDepartmentsDepartmentIdCircuitsUrl: (departmentId: string) => string;
export declare const getDepartmentsDepartmentIdCircuits: (departmentId: string, options?: RequestInit) => Promise<getDepartmentsDepartmentIdCircuitsResponse>;
/**
 * @summary  (Secured - Roles: Voter)
 */
export type postCitizenCitizenIdVoteCircuitIdResponse = {
    data: DefaultOk;
    status: number;
};
export declare const getPostCitizenCitizenIdVoteCircuitIdUrl: (citizenId: number, circuitId: string) => string;
export declare const postCitizenCitizenIdVoteCircuitId: (citizenId: number, circuitId: string, incomingVotes: IncomingVotes, options?: RequestInit) => Promise<postCitizenCitizenIdVoteCircuitIdResponse>;
export type postDebugFakeResponse = {
    data: StateSnapshot;
    status: number;
};
export declare const getPostDebugFakeUrl: () => string;
export declare const postDebugFake: (fakeInput: FakeInput, options?: RequestInit) => Promise<postDebugFakeResponse>;
/**
 * @summary  (Secured)
 */
export type getDebugJWTResponse = {
    data: string[];
    status: number;
};
export declare const getGetDebugJWTUrl: () => string;
export declare const getDebugJWT: (options?: RequestInit) => Promise<getDebugJWTResponse>;
export type postDebugJWTResponse = {
    data: RoleIEnumerableAuthResponse;
    status: number;
};
export declare const getPostDebugJWTUrl: () => string;
export declare const postDebugJWT: (role: Role[], options?: RequestInit) => Promise<postDebugJWTResponse>;
export type getDebugTestAuthorsResponse = {
    data: ListAuthorsRow[];
    status: number;
};
export declare const getGetDebugTestAuthorsUrl: () => string;
export declare const getDebugTestAuthors: (options?: RequestInit) => Promise<getDebugTestAuthorsResponse>;
export type postDebugTestAuthorsResponse = {
    data: number;
    status: number;
};
export declare const getPostDebugTestAuthorsUrl: () => string;
export declare const postDebugTestAuthors: (createAuthorArgs: CreateAuthorArgs, options?: RequestInit) => Promise<postDebugTestAuthorsResponse>;
export type getDepartmentsResponse = {
    data: Department[];
    status: number;
};
export declare const getGetDepartmentsUrl: () => string;
export declare const getDepartments: (options?: RequestInit) => Promise<getDepartmentsResponse>;
export type getElectionsResponse = {
    data: ElectionListModel;
    status: number;
};
export declare const getGetElectionsUrl: (params?: GetElectionsParams) => string;
export declare const getElections: (params?: GetElectionsParams, options?: RequestInit) => Promise<getElectionsResponse>;
export type postElectionsResponse = {
    data: DefaultOk;
    status: number;
};
export declare const getPostElectionsUrl: () => string;
export declare const postElections: (election: Election, options?: RequestInit) => Promise<postElectionsResponse>;
export type getElectionsElectionIdResponse = {
    data: Election;
    status: number;
};
export declare const getGetElectionsElectionIdUrl: (electionId: string) => string;
export declare const getElectionsElectionId: (electionId: string, options?: RequestInit) => Promise<getElectionsElectionIdResponse>;
